import streamlit as st
import requests
import time
from datetime import datetime
from PIL import Image
from io import BytesIO
import pandas as pd

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã ===
API_BASE = "http://localhost:8000"
COMPANIES = ["–°–±–µ—Ä–±–∞–Ω–∫", "–ì–∞–∑–ø—Ä–æ–º", "–õ—É–∫–æ–π–ª", "–í–¢–ë", "–†–æ—Å–Ω–µ—Ñ—Ç—å", "–ú–∞–≥–Ω–∏—Ç", "–ú–¢–°", "–ê—ç—Ä–æ—Ñ–ª–æ—Ç"]

# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–∞–∑–¥–µ–ª–æ–≤
section_map = {
    "russia": "üá∑üá∫ –†–æ—Å—Å–∏—è",
    "world": "üåç –ú–∏—Ä",
    "business": "üíº –≠–∫–æ–Ω–æ–º–∏–∫–∞",
    "culture": "üé≠ –ö—É–ª—å—Ç—É—Ä–∞",
    "moscow": "üèô –ú–æ—Å–∫–≤–∞",
    "digital": "üñ• Digital",
    "photo": "üì∏ –§–æ—Ç–æ",
    "sport": "üèÖ –°–ø–æ—Ä—Ç"
}

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ===
st.set_page_config(layout="wide")
st.title("–ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π –∏ –¥–∏–Ω–∞–º–∏–∫–∏ –∞–∫—Ü–∏–π")

# === –ü–∞–Ω–µ–ª—å –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ===
with st.sidebar:
    st.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∞–Ω–∞–ª–∏–∑–∞")
    company = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫–æ–º–ø–∞–Ω–∏—é", COMPANIES)
    today = datetime.today().date()
    start_date = st.date_input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞", datetime(2025, 1, 1), max_value=today)
    end_date = st.date_input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è", today, max_value=today)
    threshold = st.slider("–ü–æ—Ä–æ–≥ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ü–µ–Ω—ã (%)", 1.0, 10.0, 5.0, step=0.5)
    forecast_days = st.slider("–î–Ω–µ–π –¥–ª—è –ø—Ä–æ–≥–Ω–æ–∑–∞", 3, 30, 10)

    mode = st.radio(
        "–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã",
        options=["analyze", "validate", "monthly"],
        format_func=lambda x: {
            "analyze": "–û–±—ã—á–Ω—ã–π –∞–Ω–∞–ª–∏–∑",
            "validate": "–ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–¥–µ–ª–∏",
            "monthly": "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü"
        }[x]
    )

    # –û–ø–∏—Å–∞–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
    if mode == "validate":
        st.info("–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10% –¥–∞–Ω–Ω—ã—Ö –∏—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–∞—è –≤—ã–±–æ—Ä–∫–∞.")
    elif mode == "monthly":
        st.info("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –º–µ—Å—è—Ü: –æ–±—É—á–µ–Ω–∏–µ –Ω–∞ –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö –¥–æ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –º–µ—Å—è—Ü–∞.")
    else:
        st.info("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –∑–∞–¥–∞–Ω–Ω–æ–µ —á–∏—Å–ª–æ –¥–Ω–µ–π –æ—Ç –∫–æ–Ω—Ü–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞.")

    analyze_btn = st.button("–ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑")

# === –ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ ===
if analyze_btn:
    with st.spinner("–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞..."):
        payload = {
            "ticker_name": company,
            "start_date": str(start_date),
            "end_date": str(end_date),
            "threshold": threshold,
            "forecast_days": forecast_days,
            "mode": mode
        }

        try:
            # –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –∞–Ω–∞–ª–∏–∑–∞
            res = requests.post(f"{API_BASE}/analyze/start", json=payload)
            if res.status_code != 200:
                st.error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏–∑.")
                st.stop()

            task_id = res.json()["task_id"]
            status_box = st.empty()
            progress_bar = st.progress(0)
            log_box = st.empty()

            # –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            for i in range(100):
                status_res = requests.get(f"{API_BASE}/analyze/status/{task_id}")
                if status_res.status_code != 200:
                    st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏.")
                    st.stop()

                data = status_res.json()
                status_box.markdown(f"**–°—Ç–∞—Ç—É—Å:** {data['status']}")
                log_box.code("\n".join(data["logs"]), language="text")

                if data["status"] == "done":
                    progress_bar.progress(100)
                    break
                elif data["status"] == "error":
                    st.error("–û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è –∞–Ω–∞–ª–∏–∑–∞.")
                    st.stop()
                else:
                    progress = min(95, int((i / 100) * 95))
                    progress_bar.progress(progress)
                    time.sleep(2)

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            result_res = requests.get(f"{API_BASE}/analyze/result/{task_id}")
            if result_res.status_code != 200:
                st.error("–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
                st.stop()

            result = result_res.json()
            st.success("–ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω!")

            # === –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ ===

            st.subheader("–ö—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ü–µ–Ω")
            st.markdown(result["price_summary"])

            def render_news_block(title, items):
                st.subheader(title)
                if items:
                    for item in items:
                        section = item.get("section", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
                        section_pretty = section_map.get(section.lower(), section.capitalize())
                        st.markdown(
                            f"**{item['date']}** | {item['title']} [{item['label']}]  \n"
                            f"**–†–∞–∑–¥–µ–ª:** *{section_pretty}*  \n"
                            f"[–ß–∏—Ç–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å]({item['url']})"
                        )
                else:
                    st.info("–ù–µ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è.")

            render_news_block("–ù–æ–≤–æ—Å—Ç–∏ –ø–æ –∑–Ω–∞—á–∏–º—ã–º –¥–Ω—è–º", result["news"])
            render_news_block("–ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π", result["recent_news"])

            st.subheader("–§–∏–Ω–∞–ª—å–Ω—ã–π –≤—ã–≤–æ–¥")
            st.markdown(result["summary"])

            if result.get("metrics"):
                st.subheader("–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π")
                df_metrics = pd.DataFrame(result["metrics"])
                df_metrics["mae"] = df_metrics["mae"].round(3)
                df_metrics["rmse"] = df_metrics["rmse"].round(3)
                st.dataframe(df_metrics.sort_values("rmse"))

            st.subheader("–ì—Ä–∞—Ñ–∏–∫–∏ –ø—Ä–æ–≥–Ω–æ–∑–∞")
            for path in result["graph_paths"]:
                with open(path, "rb") as f:
                    img = Image.open(BytesIO(f.read()))
                    st.image(img, use_container_width=True)

        except Exception as e:
            st.exception(f"–û—à–∏–±–∫–∞: {e}")
